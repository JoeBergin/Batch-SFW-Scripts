{
  "title": "Consequences",
  "story": [
    {
      "type": "paragraph",
      "id": "e3581e1f87be945c",
      "text": "It is possible, using polymorphism (along with recursion) to write a complex program with cyclomatic complexity one. No internal logic structure to any method anywhere visible in the program (outside the language's standard libraries). "
    },
    {
      "type": "paragraph",
      "id": "28e56fea5c421a50",
      "text": "[[Joe Bergin]] has built demonstration programs for calculators and Turing Machines this way. The Turing Machine, to be honest, relies on the HashMap from the Java libraries, which is built with ad-hoc selection, of course. Joe has never tried to build a Polymorphic hash map, but in the \"visible\" program, there is no structure other than sending messages to objects. "
    },
    {
      "type": "paragraph",
      "id": "c11e12da95590184",
      "text": "Moreover, these programs have the following characteristics. (a) Each class is simple: only a few methods (maybe two or three). (b) Each method is simple: only a few statements (maybe one or two). But a Turing Machine is still a pretty complex thing. So where did the complexity go? "
    },
    {
      "type": "paragraph",
      "id": "1ebac910d5be2abb",
      "text": "Thinking....Thinking...Thinking..."
    },
    {
      "type": "paragraph",
      "id": "a022b6177a839ac5",
      "text": "Ah, the complexity is in the interactions between objects. Therefore..."
    },
    {
      "type": "paragraph",
      "id": "b37e0903509bc6db",
      "text": "Well, therefore, you have a lot of objects interacting in complex ways. And that doesn't, by itself, make a program easy to understand. The program also has lots of classes and interfaces, as you will see from the rest of this essay. Many (many) of the classes are inner classes to some other, so each \"topmost\" class is complex because it has a lot of simple parts. "
    },
    {
      "type": "paragraph",
      "id": "c729f9df12762274",
      "text": "But if you decompose an automobile to its lowest level parts, they are also mostly simple. So we are not without skills in understanding such things. "
    },
    {
      "type": "paragraph",
      "id": "5ca503a44f0d7e29",
      "text": "One difference between the way a traditional programmer might think is this. When a C programmer faces local complexity, they bring procedural abstraction to bear. \"Write a helper function.\" When a polymorphic programmer faces such situations, she is more likely to apply a higher level abstraction. \"Write a helper class.\""
    }
  ],
  "journal": [
    {
      "type": "create",
      "id": "125a4e69b61572af",
      "item": {
        "title": "Consequences"
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "e3581e1f87be945c"
      },
      "id": "e3581e1f87be945c",
      "type": "add"
    },
    {
      "type": "edit",
      "id": "e3581e1f87be945c",
      "item": {
        "type": "paragraph",
        "id": "e3581e1f87be945c",
        "text": "It is possible, using polymorphism (along with recursion) to write a complex program with cyclomatic complexity zero. No internal logic structure to any method anywhere visible in the program (outside the language's standard libraries). "
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "28e56fea5c421a50"
      },
      "id": "28e56fea5c421a50",
      "type": "add",
      "after": "e3581e1f87be945c"
    },
    {
      "type": "edit",
      "id": "28e56fea5c421a50",
      "item": {
        "type": "paragraph",
        "id": "28e56fea5c421a50",
        "text": "[[Joe Bergin]] has built demonstration programs for calculators and turing machines this way. The turing machine, to be honest, relies on the HashMap from the Java libraries, which is built with ad-hoc selection, of course. Joe has never tried to build a Polymorphic hash map, but in the \"visible\" program, there is no structure other than sending messages to objects. "
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "c11e12da95590184"
      },
      "id": "c11e12da95590184",
      "type": "add",
      "after": "28e56fea5c421a50"
    },
    {
      "type": "edit",
      "id": "c11e12da95590184",
      "item": {
        "type": "paragraph",
        "id": "c11e12da95590184",
        "text": "Moreover, these programs have the following characteristics. (a) Each class is simple: only a few methods (maybe two or three). (b) Each method is simple: only a few statements (maybe one or two). But a Turing Machine is still a pretty complex thing. So where did the complexity go? "
      }
    },
    {
      "type": "edit",
      "id": "28e56fea5c421a50",
      "item": {
        "type": "paragraph",
        "id": "28e56fea5c421a50",
        "text": "[[Joe Bergin]] has built demonstration programs for calculators and Turing Machines this way. The Turing Machine, to be honest, relies on the HashMap from the Java libraries, which is built with ad-hoc selection, of course. Joe has never tried to build a Polymorphic hash map, but in the \"visible\" program, there is no structure other than sending messages to objects. "
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "1ebac910d5be2abb"
      },
      "id": "1ebac910d5be2abb",
      "type": "add",
      "after": "c11e12da95590184"
    },
    {
      "type": "edit",
      "id": "1ebac910d5be2abb",
      "item": {
        "type": "paragraph",
        "id": "1ebac910d5be2abb",
        "text": "Thinking....Thinking...Thinking..."
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "a022b6177a839ac5"
      },
      "id": "a022b6177a839ac5",
      "type": "add",
      "after": "1ebac910d5be2abb"
    },
    {
      "type": "edit",
      "id": "a022b6177a839ac5",
      "item": {
        "type": "paragraph",
        "id": "a022b6177a839ac5",
        "text": "Ah, the complexity is in the interactions between objects. Therefore..."
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "b37e0903509bc6db"
      },
      "id": "b37e0903509bc6db",
      "type": "add",
      "after": "a022b6177a839ac5"
    },
    {
      "type": "edit",
      "id": "b37e0903509bc6db",
      "item": {
        "type": "paragraph",
        "id": "b37e0903509bc6db",
        "text": "Well, therefore, you have a lot of objects interacting in complex ways. And that doesn't, by itself, make a program easy to understand. The program also has lots of classes and interfaces, as you will see from the rest of this essay. Many (many) of the classes are inner classes to some other, so each \"topmost\" class is complex because it has a lot of simple parts. "
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "c729f9df12762274"
      },
      "id": "c729f9df12762274",
      "type": "add",
      "after": "b37e0903509bc6db"
    },
    {
      "type": "edit",
      "id": "c729f9df12762274",
      "item": {
        "type": "paragraph",
        "id": "c729f9df12762274",
        "text": "But if you decompose an automobile to its lowest level parts, they are also mostly simple. So we are not without skills in understanding such things. "
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "5ca503a44f0d7e29"
      },
      "id": "5ca503a44f0d7e29",
      "type": "add",
      "after": "c729f9df12762274"
    },
    {
      "type": "edit",
      "id": "5ca503a44f0d7e29",
      "item": {
        "type": "paragraph",
        "id": "5ca503a44f0d7e29",
        "text": "One difference between the way a traditional programmer might think is this. When a C programmer faces local complexity, they bring procedural abstraction to bear. \"Write a helper function.\" When a polymorphic programmer faces such situations, she is more likely to apply a higher level abstraction. \"Write a helper class.\""
      }
    },
    {
      "type": "edit",
      "id": "e3581e1f87be945c",
      "item": {
        "type": "paragraph",
        "id": "e3581e1f87be945c",
        "text": "It is possible, using polymorphism (along with recursion) to write a complex program with cyclomatic complexity one. No internal logic structure to any method anywhere visible in the program (outside the language's standard libraries). "
      }
    }
  ]
}